// –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã
let coins = 0;
let totalClicks = 0;
let coinsPerSecond = 0;
let clickPower = 1;
let prestigeMultiplier = 1;
let prestigePoints = 0;

// –£–ª—É—á—à–µ–Ω–∏—è
const upgrades = {
    auto: [
        {
            id: 'auto1',
            name: '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∑–æ–Ω–¥',
            description: '–°–æ–±–∏—Ä–∞–µ—Ç –º–æ–Ω–µ—Ç—ã –∏–∑ –∫–æ—Å–º–æ—Å–∞',
            baseCost: 10,
            basePower: 0.1,
            level: 0,
            maxLevel: 100,
            icon: 'üõ∞Ô∏è'
        },
        {
            id: 'auto2',
            name: '–†–æ–±–æ—Ç-—à–∞—Ö—Ç–µ—Ä',
            description: '–î–æ–±—ã–≤–∞–µ—Ç –∞—Å—Ç–µ—Ä–æ–∏–¥—ã',
            baseCost: 50,
            basePower: 0.5,
            level: 0,
            maxLevel: 50,
            icon: 'ü§ñ'
        },
        {
            id: 'auto3',
            name: '–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–Ω—Ü–∏—è',
            description: '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –º–æ–Ω–µ—Ç—ã –≤ –±–æ–ª—å—à–∏—Ö –º–∞—Å—à—Ç–∞–±–∞—Ö',
            baseCost: 100,
            basePower: 2,
            level: 0,
            maxLevel: 25,
            icon: 'üõ∏'
        },
        {
            id: 'auto4',
            name: '–ì–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–≤–æ–¥',
            description: '–ú–∞—Å—Å–æ–≤–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –º–æ–Ω–µ—Ç',
            baseCost: 500,
            basePower: 10,
            level: 0,
            maxLevel: 10,
            icon: 'üè≠'
        }
    ],
    click: [
        {
            id: 'click1',
            name: '–£—Å–∏–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä—á–∞—Ç–∫–∏',
            description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–∏–ª—É –∫–ª–∏–∫–∞',
            baseCost: 15,
            basePower: 1,
            level: 0,
            maxLevel: 20,
            icon: 'üß§'
        },
        {
            id: 'click2',
            name: '–ö–≤–∞–Ω—Ç–æ–≤—ã–π —É—Å–∏–ª–∏—Ç–µ–ª—å',
            description: '–£–º–Ω–æ–∂–∞–µ—Ç —Å–∏–ª—É –∫–ª–∏–∫–∞',
            baseCost: 100,
            basePower: 2,
            level: 0,
            maxLevel: 10,
            icon: '‚öõÔ∏è'
        },
        {
            id: 'click3',
            name: '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –º–æ–ª–æ—Ç',
            description: '–ú–æ—â–Ω—ã–µ —É–¥–∞—Ä—ã –ø–æ –∞—Å—Ç–µ—Ä–æ–∏–¥–∞–º',
            baseCost: 500,
            basePower: 5,
            level: 0,
            maxLevel: 5,
            icon: 'üî®'
        }
    ]
};

// –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
const achievements = [
    {
        id: 'ach1',
        name: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
        description: '–°–¥–µ–ª–∞—Ç—å 10 –∫–ª–∏–∫–æ–≤',
        icon: 'üë£',
        condition: () => totalClicks >= 10,
        unlocked: false,
        reward: 10
    },
    {
        id: 'ach2',
        name: '–ù–∞—á–∏–Ω–∞—é—â–∏–π –º–∞–≥–Ω–∞—Ç',
        description: '–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å 100 –º–æ–Ω–µ—Ç',
        icon: 'üí∞',
        condition: () => coins >= 100,
        unlocked: false,
        reward: 20
    },
    {
        id: 'ach3',
        name: '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è',
        description: '–ö—É–ø–∏—Ç—å –ø–µ—Ä–≤–æ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ',
        icon: '‚öôÔ∏è',
        condition: () => upgrades.auto.some(u => u.level > 0),
        unlocked: false,
        reward: 30
    },
    {
        id: 'ach4',
        name: '–ö–ª–∏–∫–µ—Ä-–ø—Ä–æ—Ñ–∏',
        description: '–°–¥–µ–ª–∞—Ç—å 1000 –∫–ª–∏–∫–æ–≤',
        icon: 'üèÜ',
        condition: () => totalClicks >= 1000,
        unlocked: false,
        reward: 50
    },
    {
        id: 'ach5',
        name: '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –±–æ–≥–∞—á',
        description: '–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å 10,000 –º–æ–Ω–µ—Ç',
        icon: 'ü™ô',
        condition: () => coins >= 10000,
        unlocked: false,
        reward: 100
    },
    {
        id: 'ach6',
        name: '–ú–∞—Å—Ç–µ—Ä —É–ª—É—á—à–µ–Ω–∏–π',
        description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–ª—É—á—à–∏—Ç—å —á—Ç–æ-–ª–∏–±–æ',
        icon: 'üéØ',
        condition: () => [...upgrades.auto, ...upgrades.click].some(u => u.level === u.maxLevel),
        unlocked: false,
        reward: 150
    }
];

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const coinsDisplay = document.getElementById('coins');
const clicksDisplay = document.getElementById('clicks');
const cpsDisplay = document.getElementById('cps');
const clickPowerDisplay = document.getElementById('click-power');
const clickerBtn = document.getElementById('clicker');
const autoUpgradesContainer = document.getElementById('auto-upgrades');
const clickUpgradesContainer = document.getElementById('click-upgrades');
const achievementsList = document.getElementById('achievements-list');
const prestigeMultiplierDisplay = document.getElementById('prestige-multiplier');
const prestigePointsDisplay = document.getElementById('prestige-points');
const prestigeBtn = document.getElementById('prestige-btn');
const notificationsContainer = document.getElementById('notifications');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame() {
    loadGame();
    renderUpgrades();
    renderAchievements();
    updateDisplays();
    setupEventListeners();
    startGameLoop();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∏–≥—Ä—ã
function loadGame() {
    const savedGame = localStorage.getItem('cosmicClickerSave');
    if (savedGame) {
        const data = JSON.parse(savedGame);
        coins = data.coins || 0;
        totalClicks = data.totalClicks || 0;
        coinsPerSecond = data.coinsPerSecond || 0;
        clickPower = data.clickPower || 1;
        prestigeMultiplier = data.prestigeMultiplier || 1;
        prestigePoints = data.prestigePoints || 0;
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ —É–ª—É—á—à–µ–Ω–∏–π
        if (data.upgrades) {
            for (const category in upgrades) {
                upgrades[category].forEach(upgrade => {
                    const savedUpgrade = data.upgrades[category]?.find(u => u.id === upgrade.id);
                    if (savedUpgrade) {
                        upgrade.level = savedUpgrade.level;
                    }
                });
            }
        }
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        if (data.achievements) {
            achievements.forEach(achievement => {
                const savedAchievement = data.achievements.find(a => a.id === achievement.id);
                if (savedAchievement) {
                    achievement.unlocked = savedAchievement.unlocked;
                }
            });
        }
        
        showNotification('–ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!', 'success');
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã
function saveGame() {
    const gameData = {
        coins,
        totalClicks,
        coinsPerSecond,
        clickPower,
        prestigeMultiplier,
        prestigePoints,
        upgrades: {
            auto: upgrades.auto.map(u => ({ id: u.id, level: u.level })),
            click: upgrades.click.map(u => ({ id: u.id, level: u.level }))
        },
        achievements: achievements.map(a => ({ id: a.id, unlocked: a.unlocked }))
    };
    
    localStorage.setItem('cosmicClickerSave', JSON.stringify(gameData));
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
function updateDisplays() {
    coinsDisplay.textContent = Math.floor(coins).toLocaleString();
    clicksDisplay.textContent = totalClicks.toLocaleString();
    cpsDisplay.textContent = (coinsPerSecond * prestigeMultiplier).toFixed(1);
    clickPowerDisplay.textContent = `+${(clickPower * prestigeMultiplier).toFixed(1)}`;
    prestigeMultiplierDisplay.textContent = `${prestigeMultiplier.toFixed(1)}x`;
    prestigePointsDisplay.textContent = prestigePoints.toLocaleString();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Å—Ç–∏–∂–∞
    if (coins >= 100000 && !prestigeBtn.disabled) {
        prestigeBtn.disabled = false;
        prestigeBtn.textContent = `–ü—Ä–µ—Å—Ç–∏–∂ (${Math.floor(Math.sqrt(coins / 10000))} –∑–≤–µ–∑–¥)`;
    }
}

// –†–µ–Ω–¥–µ—Ä —É–ª—É—á—à–µ–Ω–∏–π
function renderUpgrades() {
    autoUpgradesContainer.innerHTML = '';
    clickUpgradesContainer.innerHTML = '';
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è
    upgrades.auto.forEach(upgrade => {
        const cost = Math.floor(upgrade.baseCost * Math.pow(1.15, upgrade.level));
        const power = upgrade.basePower * (upgrade.level + 1);
        
        const upgradeEl = document.createElement('div');
        upgradeEl.className = `upgrade-item ${upgrade.level > 0 ? 'unlocked' : ''} ${upgrade.level === upgrade.maxLevel ? 'maxed' : ''}`;
        upgradeEl.innerHTML = `
            <div class="upgrade-header">
                <span class="upgrade-name">${upgrade.icon} ${upgrade.name}</span>
                <span class="upgrade-level">–£—Ä. ${upgrade.level}/${upgrade.maxLevel}</span>
            </div>
            <div class="upgrade-description">${upgrade.description}</div>
            <div class="upgrade-footer">
                <span class="upgrade-cost">${cost.toLocaleString()} –º–æ–Ω–µ—Ç</span>
                <button class="upgrade-btn" data-id="${upgrade.id}" ${coins < cost || upgrade.level >= upgrade.maxLevel ? 'disabled' : ''}>
                    ${upgrade.level === 0 ? '–ö—É–ø–∏—Ç—å' : '–£–ª—É—á—à–∏—Ç—å'}
                </button>
            </div>
        `;
        
        autoUpgradesContainer.appendChild(upgradeEl);
    });
    
    // –£–ª—É—á—à–µ–Ω–∏—è –∫–ª–∏–∫–∞
    upgrades.click.forEach(upgrade => {
        const cost = Math.floor(upgrade.baseCost * Math.pow(1.2, upgrade.level));
        const power = upgrade.basePower;
        
        const upgradeEl = document.createElement('div');
        upgradeEl.className = `upgrade-item ${upgrade.level > 0 ? 'unlocked' : ''} ${upgrade.level === upgrade.maxLevel ? 'maxed' : ''}`;
        upgradeEl.innerHTML = `
            <div class="upgrade-header">
                <span class="upgrade-name">${upgrade.icon} ${upgrade.name}</span>
                <span class="upgrade-level">–£—Ä. ${upgrade.level}/${upgrade.maxLevel}</span>
            </div>
            <div class="upgrade-description">${upgrade.description}</div>
            <div class="upgrade-footer">
                <span class="upgrade-cost">${cost.toLocaleString()} –º–æ–Ω–µ—Ç</span>
                <button class="upgrade-btn" data-id="${upgrade.id}" ${coins < cost || upgrade.level >= upgrade.maxLevel ? 'disabled' : ''}>
                    ${upgrade.level === 0 ? '–ö—É–ø–∏—Ç—å' : '–£–ª—É—á—à–∏—Ç—å'}
                </button>
            </div>
        `;
        
        clickUpgradesContainer.appendChild(upgradeEl);
    });
}

// –†–µ–Ω–¥–µ—Ä –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function renderAchievements() {
    achievementsList.innerHTML = '';
    
    achievements.forEach(achievement => {
        const achievementEl = document.createElement('div');
        achievementEl.className = `achievement-item ${achievement.unlocked ? 'unlocked' : ''}`;
        achievementEl.innerHTML = `
            <div class="achievement-icon">${achievement.icon}</div>
            <div class="achievement-name">${achievement.name}</div>
            <div class="achievement-desc">${achievement.description}</div>
            ${achievement.unlocked ? '<div class="achievement-reward">+' + achievement.reward + ' –º–æ–Ω–µ—Ç</div>' : ''}
        `;
        
        achievementsList.appendChild(achievementEl);
    });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –ö–ª–∏–∫ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–Ω–æ–ø–∫–µ
    clickerBtn.addEventListener('click', handleClick);
    
    // –ö–ª–∏–∫ –ø–æ —É–ª—É—á—à–µ–Ω–∏—è–º
    document.querySelectorAll('.upgrade-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const upgradeId = this.getAttribute('data-id');
            buyUpgrade(upgradeId);
        });
    });
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const tabId = this.getAttribute('data-tab');
            switchTab(tabId);
        });
    });
    
    // –ü—Ä–µ—Å—Ç–∏–∂
    prestigeBtn.addEventListener('click', performPrestige);
    
    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    setInterval(saveGame, 10000);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞
function handleClick(e) {
    // –ü–æ–∑–∏—Ü–∏—è –∫–ª–∏–∫–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞
    const rect = clickerBtn.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;
    
    // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∫–ª–∏–∫–∞
    const effect = document.createElement('div');
    effect.className = 'click-effect';
    effect.style.left = `${x - 25}px`;
    effect.style.top = `${y - 25}px`;
    clickerBtn.appendChild(effect);
    
    // –£–¥–∞–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
        effect.remove();
    }, 500);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç—ã
    coins += clickPower * prestigeMultiplier;
    totalClicks++;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    updateDisplays();
    checkAchievements();
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
    clickerBtn.style.transform = 'scale(0.95)';
    setTimeout(() => {
        clickerBtn.style.transform = 'scale(1)';
    }, 100);
}

// –ü–æ–∫—É–ø–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è
function buyUpgrade(upgradeId) {
    // –ù–∞—Ö–æ–¥–∏–º —É–ª—É—á—à–µ–Ω–∏–µ
    let upgrade;
    let category;
    
    for (const cat in upgrades) {
        const found = upgrades[cat].find(u => u.id === upgradeId);
        if (found) {
            upgrade = found;
            category = cat;
            break;
        }
    }
    
    if (!upgrade) return;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
    const cost = Math.floor(upgrade.baseCost * Math.pow(category === 'auto' ? 1.15 : 1.2, upgrade.level));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –¥–µ–Ω–µ–≥
    if (coins >= cost && upgrade.level < upgrade.maxLevel) {
        coins -= cost;
        upgrade.level++;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if (category === 'auto') {
            coinsPerSecond += upgrade.basePower * prestigeMultiplier;
        } else {
            clickPower += upgrade.basePower;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        updateDisplays();
        renderUpgrades();
        checkAchievements();
        
        showNotification(`${upgrade.name} —É–ª—É—á—à–µ–Ω–æ –¥–æ —É—Ä–æ–≤–Ω—è ${upgrade.level}!`, 'success');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É
        saveGame();
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function checkAchievements() {
    let newAchievements = 0;
    
    achievements.forEach(achievement => {
        if (!achievement.unlocked && achievement.condition()) {
            achievement.unlocked = true;
            coins += achievement.reward;
            newAchievements++;
            
            showNotification(`–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: ${achievement.name}! +${achievement.reward} –º–æ–Ω–µ—Ç`, 'success');
        }
    });
    
    if (newAchievements > 0) {
        renderAchievements();
        updateDisplays();
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
function switchTab(tabId) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.classList.toggle('active', btn.getAttribute('data-tab') === tabId);
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
    document.querySelectorAll('.tab-content').forEach(tab => {
        tab.classList.toggle('active', tab.id === tabId);
    });
}

// –ü—Ä–µ—Å—Ç–∏–∂
function performPrestige() {
    if (coins < 100000) return;
    
    const pointsGained = Math.floor(Math.sqrt(coins / 10000));
    prestigePoints += pointsGained;
    prestigeMultiplier = 1 + (prestigePoints * 0.1);
    
    // –°–±—Ä–æ—Å –∏–≥—Ä—ã
    coins = 0;
    totalClicks = 0;
    coinsPerSecond = 0;
    clickPower = 1;
    
    // –°–±—Ä–æ—Å —É–ª—É—á—à–µ–Ω–∏–π (–Ω–æ –Ω–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π)
    for (const category in upgrades) {
        upgrades[category].forEach(upgrade => {
            upgrade.level = 0;
        });
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    updateDisplays();
    renderUpgrades();
    prestigeBtn.disabled = true;
    
    showNotification(`–ü—Ä–µ—Å—Ç–∏–∂! –ü–æ–ª—É—á–µ–Ω–æ ${pointsGained} –∑–≤–µ–∑–¥. –ú–Ω–æ–∂–∏—Ç–µ–ª—å: ${prestigeMultiplier.toFixed(1)}x`, 'warning');
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    saveGame();
}

// –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
function startGameLoop() {
    setInterval(() => {
        coins += coinsPerSecond * prestigeMultiplier / 10;
        updateDisplays();
        checkAchievements();
    }, 100);
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    notificationsContainer.appendChild(notification);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        notification.style.opacity = '0';
        setTimeout(() => {
            notification.remove();
        }, 300);
    }, 3000);
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('load', initGame);